---
import HeaderStore from "../components/HeaderStore.astro";
import Footer from "../components/Footer.astro";
import Layout from "../layouts/Layout.astro";
import "../styles/style.css";
import MenuD from "../components/MenuD.astro";
import Menu from "../components/Menu.astro";
const response = await fetch("http://localhost:8080/productos"); // Ajusta la URL
const productos = await response.json();

interface Producto {
  id: number;
  nombre: string;
  descripcion: string;
  precio: number;
  stock: number;
  imagenes: string[];
  name: string;
}
---
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8"> <!-- Aquí se configura UTF-8 -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Filtro</title>
</head>


<body >
 
<MenuD  class="filter-menu"/>
<Menu/>
  
<HeaderStore/>
<Layout headerClass="filter-header"/>
<section class="store-product-listing" id="tienda">
  <section class="store-product-listing" id="tienda">
    <!-- Filtros -->
    <div class="store-filter-container">
      <!-- Price Range -->
      <div class="store-filter-section">
        <h4>Select Price Range</h4>
        <div class="store-price-range">
          <span class="store-price-value">$0 BDT</span>
          <input type="range" id="store-price-slider" class="store-slider" min="0" max="6000" value="0">
          <span>$6000 COP</span>
        </div>
        <button id="store-apply-price-filter" class="store-apply-filter-btn">Apply Filter</button>
      </div>

      <div class="store-filter-section">
        <h4>Product Categories</h4>
        <ul class="store-filter-list">
          <li>Featured Products (7)</li>
          <li>Luminaire Essentials (3)</li>
          <li>Luxe Luminaires (1)</li>
          <li>Radiant Stands (2)</li>
          <li>Skyward Elegance (2)</li>
          <li>Suspended Splendor (1)</li>
          <li>Task Illumination (0)</li>
        </ul>
      </div>

      <!-- Brands -->
      <div class="store-filter-section">
        <h4>Brands</h4>
        <ul class="store-filter-list">
          <li><input type="checkbox"> Artisan Globe Lamps (2)</li>
          <li><input type="checkbox"> Urban Lights Emporium (3)</li>
          <li><input type="checkbox"> Ecoglow Designs (1)</li>
          <li><input type="checkbox"> Nextcart Nexus (2)</li>
          <li><input type="checkbox"> Company 123 (4)</li>
          <li><input type="checkbox"> Home Decor (0)</li>
        </ul>
      </div>

      <div class="store-filter-section">
        <h4>Tags</h4>
        <div class="store-tags">
          <div class="store-tag">Ambient</div>
          <div class="store-tag">Elegant</div>
          <div class="store-tag">Modern</div>
          <div class="store-tag">Outdoor</div>
          <div class="store-tag">Spotlight</div>
          <div class="store-tag">Shine</div>
          <div class="store-tag">Style</div>
          <div class="store-tag">Cotton</div>
          <div class="store-tag">Glowing</div>
          <div class="store-tag">Wireless</div>
          <div class="store-tag">Bedroom</div>
          <div class="store-tag">Copper</div>
          <div class="store-tag">Shedding</div>
          <div class="store-tag">Wood</div>
          <div class="store-tag">Glow</div>
        </div>
      </div>
    </div>

    <!-- Product Grid -->
    {productos.map((producto: Producto) => (
      <div class="store-product-item" data-price={producto.precio} data-category={producto.nombre} data-brand={producto} data-tags={producto}>
        <a href={`/product/${producto.id}`}>
          <img src={producto.imagenes[0]} alt={producto.nombre} />
        </a>
        <h4>{producto.nombre}</h4>
        <p>${producto.precio} BDT</p>
      </div>
    ))}
    </div>
  </section>
</section>

<Footer/>
</body >
</Layout>
<style>
/* Contenedor principal */
/* ======== Contenedor Principal ======== */
.store-product-listing {
  display: flex;
  align-items: flex-start;
  gap: 20px;
  padding: 20px;
  background-color: #f8f8f8;
  
  padding-top: 100px;

}

/* ======== Barra de Filtros ======== */
.store-filter-container {
  width: 300px;
  background-color: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 20px;
  
}

.store-filter-container h4 {
  font-size: 1.2em;
  margin-bottom: 15px;
  font-weight: bold;
}

.store-filter-section {
  margin-bottom: 10px;
}

.store-filter-list {
  list-style: none;
  padding: 0;
  margin: 0;
  
}

.store-filter-list li {
  margin-bottom: 8px;
  display: flex;
  align-items: center;
}

.store-filter-list li input[type="checkbox"] {
  margin-right: 10px;
}

/* ======== Tags ======== */
.store-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.store-tag {
  padding: 8px 14px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 20px;
  font-size: 0.9em;
  cursor: pointer;
}

.store-tag:hover {
  background-color: #007bff;
  color: white;
  border-color: #007bff;
}

/* ======== Contenedor de Productos ======== */
.store-product-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); /* Mantiene los elementos en fila */
  align-self: flex-start;
  gap: 20px;
  justify-content: start;
  max-width: 900px;
}


.store-product-item {
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 12px;
  padding: 15px;
  text-align: center;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
  overflow: hidden;
  max-width: 250px;
 }

.store-product-item img {
  width: 100%; /* Ocupar todo el contenedor */
  height: 180px; /* Altura fija para uniformidad */
  object-fit: cover; /* Evita distorsión y recorta si es necesario */
  border-radius: 8px;
  transition: transform 0.3s ease; /* Efecto suave */
}

.store-product-item img:hover {
  transform: scale(1.1); /* Pequeño zoom al pasar el mouse */
}
.store-product-item h4 {
  font-size: 1.1em;
  margin: 10px 0;
}

.store-product-item p {
  font-size: 1em;
  color: #555;
}

/* ======== Efectos Hover ======== */
.store-product-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
}

/* ======== Rango de Precio ======== */
.store-price-range {
  display: flex;
  align-items: center;
  gap: 10px;
}

.store-slider {
  width: 100%;
}

.store-price-value {
  min-width: 80px;
}

/* ======== Botón "Apply Filter" ======== */
#store-apply-price-filter,
.store-apply-filter-btn {
  width: 100%;
  margin-top: 10px;
  padding: 8px 12px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

#store-apply-price-filter:hover,
.store-apply-filter-btn:hover {
  background-color: #0056b3;
}

@media (max-width: 768px) {
    .store-filter-container {
        width: 100%;
        position: relative;
        top: auto;
        margin-top: 20px; /* Espacio con los productos */
        order: 2; /* Hace que el filtro se mueva debajo de los productos */
    }
    .store-product-listing {
        flex-direction: column; /* Apila los elementos */
        align-items: center;
        position: relative;
        z-index: 1; /* Para que no queden debajo del menú */
    }

    .store-product-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* 2 columnas en móviles */
        width: 100%;
        order: 1; /* Hace que los productos se muestren primero */
        gap: 10px;
        overflow: visible;
        position: relative;
  z-index: 1;
    }

    .store-product-item {
        max-width: 100%;
    }
}

  </style>
<script>
 document.addEventListener('DOMContentLoaded', () => {
  const priceSlider = document.getElementById('store-price-slider');
  const priceValue = document.querySelector('.store-price-value');
  const applyFilterButton = document.getElementById('store-apply-price-filter');
  const productGrid = document.getElementById('store-product-grid');
  const tags = document.querySelectorAll('.store-tag');
  const categoryItems = document.querySelectorAll('.store-filter-list li');
  const brandCheckboxes = document.querySelectorAll('.store-filter-list input[type="checkbox"]');

  let selectedTags: string[] = [];
  let selectedCategories: string[] = [];
  let selectedBrands: string[] = [];
  let currentPrice = parseInt((priceSlider as HTMLInputElement)?.value || '1000', 10); // Valor inicial del slider

  // 🔹 Actualizar el valor del slider en tiempo real
  if (priceSlider && priceValue) {
    priceSlider.addEventListener('input', () => {
      currentPrice = parseInt((priceSlider as HTMLInputElement).value, 10);
      priceValue.textContent = `$${currentPrice} BDT`;
    });
  }

  // 🔹 Evento del botón "Apply Filter"
  applyFilterButton?.addEventListener('click', () => {
    currentPrice = parseInt((priceSlider as HTMLInputElement).value, 10);
    console.log('Filtro aplicado. Precio máximo:', currentPrice);
    filterProducts();
  });

  // 🔹 Manejo de selección de etiquetas (Tags)
  tags.forEach(tag => {
    tag.addEventListener('click', () => {
      const tagValue = tag.textContent?.trim().toLowerCase() || '';
      tag.classList.toggle('active');

      if (selectedTags.includes(tagValue)) {
        selectedTags = selectedTags.filter(t => t !== tagValue);
      } else {
        selectedTags.push(tagValue);
      }

      filterProducts();
    });
  });

  // 🔹 Manejo de selección de categorías
  categoryItems.forEach(item => {
    item.addEventListener('click', () => {
      const category = item.textContent ? item.textContent.trim().toLowerCase() : '';
      item.classList.toggle('active');

      if (selectedCategories.includes(category)) {
        selectedCategories = selectedCategories.filter(c => c !== category);
      } else {
        selectedCategories.push(category);
      }

      filterProducts();
    });
  });

  // 🔹 Manejo de selección de marcas
  brandCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      const parentElement = checkbox.parentElement;
      const brand = parentElement && parentElement.textContent ? parentElement.textContent.split('(')[0].trim().toLowerCase() : '';

      if ((checkbox as HTMLInputElement).checked) {
        selectedBrands.push(brand);
      } else {
        selectedBrands = selectedBrands.filter(b => b !== brand);
      }

      filterProducts();
    });
  });

  // 🔹 Función para filtrar productos
  function filterProducts() {
    const products = document.querySelectorAll('.store-product-item');

    products.forEach(product => {
      const price = parseInt((product as HTMLElement).dataset.price || '0', 10);
      const productCategory = (product as HTMLElement).dataset.category?.toLowerCase().trim();
      const productBrand = (product as HTMLElement).dataset.brand?.toLowerCase().trim();
      const productTags = ((product as HTMLElement).dataset.tags || '').toLowerCase().split(',').map((tag: string) => tag.trim());

      console.log(`Producto: ${product.textContent?.trim() || ''}, Precio: ${price}`);

      const matchesPrice = currentPrice === 0 || price <= currentPrice;
      const matchesCategory = selectedCategories.length === 0 || (productCategory && selectedCategories.includes(productCategory));
      const matchesBrand = selectedBrands.length === 0 || (productBrand && selectedBrands.includes(productBrand));
      const matchesTags = selectedTags.length === 0 || selectedTags.some(tag => productTags.includes(tag));

      if (matchesPrice && matchesCategory && matchesBrand && matchesTags) {
        (product as HTMLElement).style.display = 'block';
      } else {
        (product as HTMLElement).style.display = 'none';
      }
    });
  }

  // 🔹 Aplicar filtro al cargar la página
  filterProducts();
});


</script>

  
  
